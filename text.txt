# Let's create the necessary files with the given content.

# Java code for the SimpleInterestCalculator
java_code = """\
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;

public class SimpleInterestCalculator {

    public static void main(String[] args) {
        new SimpleInterestCalculator().createGUI();
    }

    void createGUI() {
        JFrame frame = new JFrame("Simple Interest Calculator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(null);

        JLabel principalLabel = new JLabel("Principal:");
        principalLabel.setBounds(50, 50, 100, 30);
        frame.add(principalLabel);

        JTextField principalField = new JTextField();
        principalField.setBounds(150, 50, 200, 30);
        frame.add(principalField);

        JLabel rateLabel = new JLabel("Rate:");
        rateLabel.setBounds(50, 100, 100, 30);
        frame.add(rateLabel);

        JTextField rateField = new JTextField();
        rateField.setBounds(150, 100, 200, 30);
        frame.add(rateField);

        JLabel timeLabel = new JLabel("Time:");
        timeLabel.setBounds(50, 150, 100, 30);
        frame.add(timeLabel);

        JTextField timeField = new JTextField();
        timeField.setBounds(150, 150, 200, 30);
        frame.add(timeField);

        JButton calculateButton = new JButton("Calculate");
        calculateButton.setBounds(50, 200, 300, 30);
        frame.add(calculateButton);

        JLabel resultLabel = new JLabel("Interest: ");
        resultLabel.setBounds(50, 250, 300, 30);
        frame.add(resultLabel);

        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculateInterest(principalField, rateField, timeField, resultLabel);
            }
        });

        frame.setVisible(true);
    }

    void calculateInterest(JTextField principalField, JTextField rateField, JTextField timeField, JLabel resultLabel) {
        String principalText = principalField.getText();
        String rateText = rateField.getText();
        String timeText = timeField.getText();

        if (!isValidDouble(principalText) || !isValidDouble(rateText) || !isValidDouble(timeText)) {
            JOptionPane.showMessageDialog(null, "Please enter valid numbers.");
            return;
        }

        double principal = Double.parseDouble(principalText);
        double rate = Double.parseDouble(rateText);
        double time = Double.parseDouble(timeText);

        if (principal <= 0 || rate <= 0 || time <= 0) {
            JOptionPane.showMessageDialog(null, "Principal, Rate, and Time must be greater than zero.");
            return;
        }

        double interest = (principal * rate * time) / 100;
        resultLabel.setText("Interest: " + interest);
        saveResultToFile(principal, rate, time, interest);
    }

    boolean isValidDouble(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    void saveResultToFile(double principal, double rate, double time, double interest) {
        try (FileWriter writer = new FileWriter("interest_result.txt")) {
            writer.write("Principal: " + principal + "\n");
            writer.write("Rate: " + rate + "\n");
            writer.write("Time: " + time + "\n");
            writer.write("Interest: " + interest + "\n");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving result to file.");
        }
    }
}
"""

# Algorithm in text format
algorithm_text = """\
Algorithm:
1. Start the program and open the GUI.
2. User inputs the principal amount, rate of interest, and time period.
3. Validate the inputs:
   - If any input is invalid (not a number), show an error message.
4. Convert inputs to double values.
5. Check if principal, rate, and time are greater than zero:
   - If any input is less than or equal to zero, show an error message.
6. Calculate the simple interest using the formula:
   Simple Interest = (Principal * Rate * Time) / 100
7. Display the calculated interest in the GUI.
8. Save the input values and calculated interest to a text file named "interest_result.txt".
"""

# README content
readme_content = """\
# Simple Interest Calculator

## Overview
This project is a Simple Interest Calculator developed in Java. It uses a graphical user interface (GUI) created with Swing to interact with the user. The program calculates the simple interest based on user inputs: principal amount, rate of interest, and time period.

## How to Run
1. Compile the Java file:
   ```sh
   javac SimpleInterestCalculator.java
   ```
2. Run the compiled Java program:
   ```sh
   java SimpleInterestCalculator
   ```

## Main Components
- `SimpleInterestCalculator` class: Contains the entire logic for the GUI, input validation, interest calculation, and file saving.
- GUI components: Created using Swing for a user-friendly interface.

## Input Validation
- The program checks if the inputs are valid numbers and greater than zero.
- If the inputs are invalid, appropriate error messages are displayed to the user.

## File Saving
- The calculated interest along with the input values are saved to a file named "interest_result.txt".
"""

# Save files
with open('/mnt/data/SimpleInterestCalculator.java', 'w') as file:
    file.write(java_code)

with open('/mnt/data/algorithm.txt', 'w') as file:
    file.write(algorithm_text)

with open('/mnt/data/README.txt', 'w') as file:
    file.write(readme_content)
